package com.KMDevelopers.volunteernow;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.MapsInitializer;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import android.app.Fragment;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Typeface;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.StrictMode;
import android.support.v4.app.FragmentManager;
import android.util.Log;
import android.view.InflateException;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

public class BookDoc extends Fragment {
	GoogleMap map ;
	ListView l;
	MapView mapView;
	String oaddress, odays, ohoursmorning, ohoursafternoon, ohoursevening, ocontactno, ofaxnumber, odistance;
	String symb,desc,mc,mapname,clickedname, clat, clong;
	List<NameValuePair> nameValuePairs;
	
	Double lat,lng;
	
	SharedPreferences sharedpreferences;
    public static final String MyPREFERENCES = "MyPrefs" ;
    public static final String pUserName = "username"; 
    public static final String pPassword = "password"; 
	
	View view;
	 @Override
	    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
	        // Inflate the layout for this fragment
		 if (view != null) {
		        ViewGroup parent = (ViewGroup) view.getParent();
		        if (parent != null) {
		            parent.removeView(view);
		        }
		    }
		    try {
		        view = inflater.inflate(R.layout.activity_main, container, false);
		    } catch (InflateException e) {

		    }
	
       
return view;
		}
	 
	 static final ArrayList<HashMap<String,String>> list = 
		    	new ArrayList<HashMap<String,String>>(); 

		
	 public String readMaps() {
	        StringBuilder builder = new StringBuilder();
	        HttpClient client = new DefaultHttpClient();
	        HttpGet httpGet = new HttpGet("http://ezdr.com.sg/appsettings/clinics.php");
	        try {
	          HttpResponse response = client.execute(httpGet);
	          StatusLine statusLine = response.getStatusLine();
	          int statusCode = statusLine.getStatusCode();
	          if (statusCode == 200) {
	            HttpEntity entity = response.getEntity();
	            InputStream content = entity.getContent();
	            BufferedReader reader = new BufferedReader(new InputStreamReader(content));
	            String line;
	            while ((line = reader.readLine()) != null) {
	              builder.append(line);
	            }
	          } else {
	            Log.e("ERROR", "Failed to load map");
	          }
	        } catch (ClientProtocolException e) {
	          e.printStackTrace();
	        } catch (IOException e) {
	          e.printStackTrace();
	        }
	        return builder.toString();
	      }
	 
	  
	 
	  public String readMaps2() {
	    	
	        StringBuilder builder = new StringBuilder();
	        HttpClient client = new DefaultHttpClient();
	        HttpPost httppost= new HttpPost("http://ezdr.com.sg/appsettings/getnearest.php"); // make sure the url is correct.
			
	        try {
	        	LatLng latl= getCurrentLocation(this.getActivity());
				nameValuePairs = new ArrayList<NameValuePair>(2);
				// Getting latitude of the current location
		      
				// Always use the same variable name for posting i.e the android side variable name and php side variable name should be similar, 
				nameValuePairs.add(new BasicNameValuePair("currentlat",String.valueOf(latl.latitude)));  // $Edittext_value = $_POST['Edittext_value'];
				nameValuePairs.add(new BasicNameValuePair("currentlng",String.valueOf(latl.longitude))); 
				clat = String.valueOf(latl.latitude);
				clong = String.valueOf(latl.longitude);
				httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
				HttpResponse response= client.execute(httppost);
	          StatusLine statusLine = response.getStatusLine();
	          int statusCode = statusLine.getStatusCode();
	          if (statusCode == 200) {
	            HttpEntity entity = response.getEntity();
	            InputStream content = entity.getContent();
	            BufferedReader reader = new BufferedReader(new InputStreamReader(content));
	            String line;
	            while ((line = reader.readLine()) != null) {
	              builder.append(line);
	            }
	          } else {
	            Log.e("ERROR", "Failed to load map");
	          }
	        } catch (ClientProtocolException e) {
	          e.printStackTrace();
	        } catch (IOException e) {
	          e.printStackTrace();
	        }
	        return builder.toString();
	      }
	        public LatLng getCurrentLocation(Context context)
	        {
	            try
	            {
	                LocationManager locMgr = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
	                Criteria criteria = new Criteria();
	                String locProvider = locMgr.getBestProvider(criteria, false);
	                Location location = locMgr.getLastKnownLocation(locProvider);
	 
	                // getting GPS status
	                boolean isGPSEnabled = locMgr.isProviderEnabled(LocationManager.GPS_PROVIDER);
	                // getting network status
	                boolean isNWEnabled = locMgr.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
	 
	                if (!isGPSEnabled && !isNWEnabled)
	                {
	                    // no network provider is enabled
	                    return null;
	                }
	                else
	                {
	                    // First get location from Network Provider
	                    if (isNWEnabled)
	                        if (locMgr != null)
	                            location = locMgr.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
	 
	                    // if GPS Enabled get lat/long using GPS Services
	                    if (isGPSEnabled)
	                        if (location == null)
	                            if (locMgr != null)
	                                location = locMgr.getLastKnownLocation(LocationManager.GPS_PROVIDER);
	                }
	 
	                return new LatLng(location.getLatitude(), location.getLongitude());
	            }
	            catch (NullPointerException ne)
	            {
	                Log.e("Current Location", "Current Lat Lng is Null");
	                return new LatLng(0, 0);
	            }
	            catch (Exception e)
	            {
	                e.printStackTrace();
	                return new LatLng(0, 0);
	            }
	        }
	        public String checkbooking(){
	       	 String fulllname = "";
	       	sharedpreferences = this.getActivity().getSharedPreferences(MyPREFERENCES, Context.MODE_PRIVATE);
	       	try{			
	       		
	       		
		        HttpClient httpclient = new DefaultHttpClient();
		        HttpPost httppost= new HttpPost("http://ezdr.com.sg/appsettings/getbooking.php"); // make sure the url is correct.
	   			//add your data
	   			nameValuePairs = new ArrayList<NameValuePair>(1);
	   			// Always use the same variable name for posting i.e the android side variable name and php side variable name should be similar, 
	   			nameValuePairs.add(new BasicNameValuePair("username",sharedpreferences.getString("username", null)));  // $Edittext_value = $_POST['Edittext_value'];
	   			httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
	   			//response=httpclient.execute(httppost);
	   			ResponseHandler<String> responseHandler = new BasicResponseHandler();
	   			final String response = httpclient.execute(httppost, responseHandler);
	   			System.out.println("Response : " + response); 
	   			
	   			
	   			fulllname = response;
	   			
	   		}catch(Exception e){
	   			
	   			System.out.println("Exception : " + e.getMessage());
	   		}
	   		return fulllname;
	       
	       }
	       
}
